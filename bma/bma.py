# This file was *autogenerated* from the file bma.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
TheFiniteField = GF(_sage_const_2 )
ThePolynomialRing = TheFiniteField['X']; (X,) = ThePolynomialRing._first_ngens(1)

def bma(s):    
    "using the notations in 'Shift-register synthesis and BCH decoding' by Massey"
    C = ThePolynomialRing(_sage_const_1 )
    B = ThePolynomialRing(_sage_const_1 )

    b = TheFiniteField(_sage_const_1 )

    m = _sage_const_1  # replacing the orignial notation, x
    L = _sage_const_0 

    for N in range(len(s)):
        d = TheFiniteField(s[N])
        for l in range(_sage_const_1 , len(C.list())): # range(1, L + 1) will cause out-of-index error
            d += C.list()[l] * TheFiniteField(s[N - l])

        if d == _sage_const_0 :
            m += _sage_const_1 
        else:
            if _sage_const_2  * L > N:
                C -= d / b * B.shift(m)
                m += _sage_const_1 
            else:
                T = C
                C -= d / b * B.shift(m)
                L = N + _sage_const_1  - L
                B = T
                b = d
                m = _sage_const_1 

    return C.reverse() # must be reversed in this notation
    # might have some problems?
    # because reverse() cannot gurantee the overall degree

if __name__ == '__main__':
    seq = (_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_1 , _sage_const_0 )
    pol = bma(seq)
    
    print 'The input sequence is', seq
    print 'Its characteristic polynomial is', pol
